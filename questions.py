
# questions = {
#     1: ("What does DataFrame.head() do?", ["Displays first rows", "Displays last rows", "Shows all rows"], "Displays first rows"),
#     2: ("How to read a CSV file?", ["pd.load_csv()", "pd.read_csv()", "pd.read_file()"], "pd.read_csv()"),
#     3: ("How to check the shape of a DataFrame?", ["df.length()", "df.size()", "df.shape"], "df.shape"),
#     4: ("Which method gives basic statistics of a DataFrame?", ["df.describe()", "df.stats()", "df.summary()"], "df.describe()"),
#     5: ("How to get unique values of a column?", ["df.unique()", "df.column.unique()", "df['col'].unique()"], "df['col'].unique()"),
#     6: ("What is the method to concatenate DataFrames?", ["df.concat()", "pd.concat()", "df.append()"], "pd.concat()"),
#     7: ("How to check for null values in a DataFrame?", ["df.isnull()", "df.checkna()", "df.hasnulls()"], "df.isnull()"),
#     8: ("What does df.dropna() do?", ["Replaces nulls with zeroes", "Drops rows with null values", "Fills nulls with mean"], "Drops rows with null values"),
#     9: ("How to sort DataFrame by multiple columns?", ["df.sort_values(by=['col1', 'col2'])", "df.order(['col1', 'col2'])", "df.arrange(by=['col1', 'col2'])"], "df.sort_values(by=['col1', 'col2'])"),
#     10: ("How to reset the DataFrame index?", ["df.reset_index(drop=True)", "df.index.reset()", "df.index.restart()"], "df.reset_index(drop=True)"),
#     11: ("How to fill missing values with column mean?", ["df.fillna(mean)", "df.fillna(df.mean())", "df.fill_mean()"], "df.fillna(df.mean())"),
#     12: ("How to group data by a column?", ["df.group('col')", "df.group_by('col')", "df.groupby('col')"], "df.groupby('col')"),
#     13: ("Which method merges two DataFrames?", ["df.merge()", "pd.combine()", "df.concat()"], "df.merge()"),
#     14: ("How to pivot a DataFrame?", ["df.pivot_table()", "df.pivot_table", "df.table_pivot()"], "df.pivot_table()"),
#     15: ("What does df.corr() compute?", ["Correlation matrix", "Covariance", "Standard deviation"], "Correlation matrix"),
#     16: ("How to select rows where column 'A' > 5?", ["df['A'] > 5", "df[df['A'] > 5]", "df.select(A > 5)"], "df[df['A'] > 5]"),
#     17: ("How to rename columns in a DataFrame?", ["df.rename_columns()", "df.rename()", "df.rename_all()"], "df.rename()"),
#     18: ("How to drop a column from DataFrame?", ["df.drop_column('col')", "df.remove('col')", "df.drop('col', axis=1)"], "df.drop('col', axis=1)"),
#     19: ("What does df.info() return?", ["Column info", "Column types and non-null counts", "Entire DataFrame summary"], "Column types and non-null counts"),
#     20: ("How to create a DataFrame from a dictionary?", ["pd.DataFrame(dict)", "pd.df(dict)", "pd.DataFrame.from_dict(dict)"], "pd.DataFrame(dict)"),
#     21: ("How to get column names of a DataFrame?", ["df.colnames()", "df.columns", "df.column_names()"], "df.columns"),
#     22: ("How to check the memory usage of a DataFrame?", ["df.memory()", "df.memory_info()", "df.memory_usage()"], "df.memory_usage()"),
#     23: ("How to remove duplicates in a DataFrame?", ["df.drop_duplicates()", "df.delete_duplicates()", "df.unique()"], "df.drop_duplicates()"),
#     24: ("How to calculate mean of a column?", ["df.col.mean()", "df['col'].mean()", "df.mean('col')"], "df['col'].mean()"),
#     25: ("How to apply a function to each row?", ["df.map(func)", "df.apply(func, axis=1)", "df.apply_row(func)"], "df.apply(func, axis=1)"),
# }

# questions.py

beginner = {
    1: ("What does DataFrame.head() do?", ["Displays first rows", "Displays last rows", "Shows all rows"], "Displays first rows"),
    2: ("How to read a CSV file?", ["pd.load_csv()", "pd.read_csv()", "pd.read_file()"], "pd.read_csv()"),
    3: ("How to check the shape of a DataFrame?", ["df.length()", "df.size()", "df.shape"], "df.shape"),
    4: ("Which method gives basic statistics of a DataFrame?", ["df.describe()", "df.stats()", "df.summary()"], "df.describe()"),
    5: ("How to get unique values of a column?", ["df.unique()", "df.column.unique()", "df['col'].unique()"], "df['col'].unique()"),
    6: ("What is the method to concatenate DataFrames?", ["df.concat()", "pd.concat()", "df.append()"], "pd.concat()"),
    7: ("How to check for null values in a DataFrame?", ["df.isnull()", "df.checkna()", "df.hasnulls()"], "df.isnull()"),
    8: ("What does df.dropna() do?", ["Replaces nulls with zeroes", "Drops rows with null values", "Fills nulls with mean"], "Drops rows with null values"),
    9: ("How to sort DataFrame by a column?", ["df.sort_values('col')", "df.order('col')", "df.arrange('col')"], "df.sort_values('col')"),
    10: ("How to reset the DataFrame index?", ["df.reset_index(drop=True)", "df.index.reset()", "df.index.restart()"], "df.reset_index(drop=True)"),
    11: ("How to fill missing values with a specific value?", ["df.fillna(0)", "df.fill(0)", "df.replace_na(0)"], "df.fillna(0)"),
    12: ("How to group data by a column?", ["df.group('col')", "df.group_by('col')", "df.groupby('col')"], "df.groupby('col')"),
    13: ("Which method merges two DataFrames?", ["df.merge()", "pd.combine()", "df.concat()"], "df.merge()"),
    14: ("How to pivot a DataFrame?", ["df.pivot_table()", "df.pivot()", "df.table_pivot()"], "df.pivot_table()"),
    15: ("What does df.corr() compute?", ["Correlation matrix", "Covariance", "Standard deviation"], "Correlation matrix"),
    16: ("How to select rows where column 'A' > 5?", ["df['A'] > 5", "df[df['A'] > 5]", "df.select(A > 5)"], "df[df['A'] > 5]"),
    17: ("How to rename columns in a DataFrame?", ["df.rename_columns()", "df.rename()", "df.rename_all()"], "df.rename()"),
    18: ("How to drop a column from DataFrame?", ["df.drop_column('col')", "df.remove('col')", "df.drop('col', axis=1)"], "df.drop('col', axis=1)"),
    19: ("What does df.info() return?", ["Column info", "Column types and non-null counts", "Entire DataFrame summary"], "Column types and non-null counts"),
    20: ("How to create a DataFrame from a dictionary?", ["pd.DataFrame(dict)", "pd.df(dict)", "pd.DataFrame.from_dict(dict)"], "pd.DataFrame(dict)"),
    21: ("How to get column names of a DataFrame?", ["df.colnames()", "df.columns", "df.column_names()"], "df.columns"),
    22: ("How to check the memory usage of a DataFrame?", ["df.memory()", "df.memory_info()", "df.memory_usage()"], "df.memory_usage()"),
    23: ("How to remove duplicates in a DataFrame?", ["df.drop_duplicates()", "df.delete_duplicates()", "df.unique()"], "df.drop_duplicates()"),
    24: ("How to calculate the mean of a column?", ["df.col.mean()", "df['col'].mean()", "df.mean('col')"], "df['col'].mean()"),
    25: ("How to apply a function to each row?", ["df.map(func)", "df.apply(func, axis=1)", "df.apply_row(func)"], "df.apply(func, axis=1)"),
}

intermediate = {
    1: ("What does df.fillna(method='ffill') do?", ["Forward fills NaN", "Backfills NaN", "Drops NaN"], "Forward fills NaN"),
    2: ("How to merge DataFrames on multiple columns?", ["df.merge(df2, on='col')", "df.merge(df2, left_on='col1', right_on='col2')", "pd.merge(df, df2, how='inner')"], "df.merge(df2, left_on='col1', right_on='col2')"),
    3: ("How to pivot a table with multiple index levels?", ["df.pivot(index='A', columns='B')", "df.pivot_table(index='A', columns='B', aggfunc='mean')", "df.table_pivot(index='A', columns='B')"], "df.pivot_table(index='A', columns='B', aggfunc='mean')"),
    4: ("How to concatenate DataFrames vertically?", ["pd.concat([df1, df2], axis=0)", "pd.concat([df1, df2])", "df1.append(df2)"], "pd.concat([df1, df2], axis=0)"),
    5: ("What is the method for sampling DataFrame rows?", ["df.sample(n=5)", "df.random_sample(5)", "df.get_sample(5)"], "df.sample(n=5)"),
    6: ("How to create a new column based on conditions?", ["df['new_col'] = df['col'].apply(func)", "df['new_col'] = np.where(df['col'] > 0, 1, 0)", "df['new_col'] = df['col'].map(func)"], "df['new_col'] = np.where(df['col'] > 0, 1, 0)"),
    7: ("What does df.groupby().agg() do?", ["Aggregates data", "Groups without aggregation", "Computes mean only"], "Aggregates data"),
    8: ("How to sort a DataFrame by index?", ["df.sort_index()", "df.order_index()", "df.sort_by_index()"], "df.sort_index()"),
    9: ("How to filter a DataFrame based on a condition?", ["df.query('col > 10')", "df[df['col'] > 10]", "df.select('col > 10')"], "df[df['col'] > 10]"),
    10: ("What method is used to export a DataFrame to a CSV file?", ["df.to_csv('file.csv')", "df.write_csv('file.csv')", "df.export_csv('file.csv')"], "df.to_csv('file.csv')"),
    11: ("How to create a DataFrame from a NumPy array?", ["pd.DataFrame(np_array)", "pd.DataFrame.from_array(np_array)", "pd.from_array(np_array)"], "pd.DataFrame(np_array)"),
    12: ("How to change the data type of a column?", ["df['col'].astype(new_type)", "df.convert_type('col', new_type)", "df.change_type('col', new_type)"], "df['col'].astype(new_type)"),
    13: ("How to handle categorical data?", ["pd.get_dummies(df['col'])", "df['col'].to_categorical()", "df.convert_categorical(df['col'])"], "pd.get_dummies(df['col'])"),
    14: ("How to access a single value in a DataFrame?", ["df.at[row, 'col']", "df.get_value(row, 'col')", "df.loc[row, 'col']"], "df.at[row, 'col']"),
    15: ("What is the purpose of df.pipe()?", ["To chain methods", "To apply a function", "To transform data"], "To chain methods"),
    16: ("How to use a custom function in apply?", ["df.apply(my_func, axis=1)", "df.map(my_func)", "df.apply(func=my_func)"], "df.apply(my_func, axis=1)"),
    17: ("What does df.duplicated() return?", ["Boolean Series of duplicates", "Count of duplicates", "DataFrame of duplicates"], "Boolean Series of duplicates"),
    18: ("How to rename multiple columns?", ["df.rename(columns={'old': 'new'})", "df.rename({'old': 'new'})", "df.rename_columns({'old': 'new'})"], "df.rename(columns={'old': 'new'})"),
    19: ("What does df.resample() do?", ["Changes the frequency of time series data", "Filters data", "Aggregates data"], "Changes the frequency of time series data"),
    20: ("How to visualize a DataFrame using seaborn?", ["sns.heatmap(df)", "sns.visualize(df)", "sns.plot(df)"], "sns.heatmap(df)"),
    21: ("How to merge DataFrames using outer join?", ["df1.merge(df2, how='outer')", "pd.merge(df1, df2, how='outer')", "df.join(df2, how='outer')"], "pd.merge(df1, df2, how='outer')"),
    22: ("What is the method to handle missing values using mean?", ["df.fillna(df['col'].mean())", "df.replace_na(df['col'].mean())", "df.mean.fillna('col')"], "df.fillna(df['col'].mean())"),
    23: ("How to create a pivot table with aggregations?", ["pd.pivot_table(df, values='val', index='idx', aggfunc='sum')", "df.pivot_table(aggfunc='sum')", "df.pivot(aggfunc='mean')"], "pd.pivot_table(df, values='val', index='idx', aggfunc='sum')"),
    24: ("How to convert a DataFrame to a NumPy array?", ["df.values", "df.to_array()", "df.convert()"], "df.values"),
    25: ("What does df.transform() do?", ["Applies a function to each group", "Aggregates data", "Filters data"], "Applies a function to each group"),
}

advanced = {
    1: ("How to use MultiIndex in a DataFrame?", ["pd.MultiIndex.from_tuples()", "pd.set_index()", "pd.Index()"], "pd.MultiIndex.from_tuples()"),
    2: ("How to optimize DataFrame memory usage?", ["pd.to_numeric()", "pd.astype(dtype)", "df.memory.optimize()"], "pd.astype(dtype)"),
    3: ("What is the method for handling time series data?", ["df.resample()", "df.time_series()", "df.date_range()"], "df.resample()"),
    4: ("How to apply multiple functions to DataFrame columns?", ["df.agg([func1, func2])", "df.apply([func1, func2])", "df.transform([func1, func2])"], "df.agg([func1, func2])"),
    5: ("What does df.query() do?", ["Evaluates a string expression", "Filters DataFrame", "Groups data"], "Evaluates a string expression"),
    6: ("How to use categorical data in DataFrame?", ["df['col'].astype('category')", "pd.to_categorical(df['col'])", "df.convert_to_categorical(df['col'])"], "df['col'].astype('category')"),
    7: ("How to create a DataFrame using a list of dictionaries?", ["pd.DataFrame(list_of_dicts)", "pd.df_from_dict(list_of_dicts)", "pd.from_list_dict(list_of_dicts)"], "pd.DataFrame(list_of_dicts)"),
    8: ("What does df.iterrows() return?", ["Generator of index and rows", "List of rows", "DataFrame of rows"], "Generator of index and rows"),
    9: ("How to handle outliers in a DataFrame?", ["Using df.clip()", "Using df.replace()", "Using df.filter()"], "Using df.clip()"),
    10: ("What is the purpose of df.explode()?", ["To split lists into rows", "To flatten DataFrames", "To merge DataFrames"], "To split lists into rows"),
    11: ("How to work with JSON data in pandas?", ["pd.read_json()", "df.to_json()", "pd.json_normalize()"], "pd.read_json()"),
    12: ("How to merge DataFrames with suffixes?", ["pd.merge(df1, df2, suffixes=('_left', '_right'))", "df1.join(df2, suffixes=('_l', '_r'))", "pd.concat(df1, df2, suffixes=('_l', '_r'))"], "pd.merge(df1, df2, suffixes=('_left', '_right'))"),
    13: ("How to handle large datasets with pandas?", ["Use Dask for parallel processing", "Load data in chunks", "Use pd.read_csv() directly"], "Use Dask for parallel processing"),
    14: ("What does df.pivot_table() do?", ["Creates a spreadsheet-like table", "Summarizes data", "Reshapes data"], "Creates a spreadsheet-like table"),
    15: ("How to create a time series DataFrame?", ["pd.date_range() to generate dates", "Using pd.Series()", "Using np.arange()"], "pd.date_range() to generate dates"),
    16: ("How to change the order of DataFrame columns?", ["df.reindex(columns=new_order)", "df.order(columns=new_order)", "df.change_order(new_order)"], "df.reindex(columns=new_order)"),
    17: ("How to drop a row based on condition?", ["df.drop(df[df['col'] < 0].index)", "df.remove(df['col'] < 0)", "df.delete(df['col'] < 0)"], "df.drop(df[df['col'] < 0].index)"),
    18: ("What does df.applymap() do?", ["Applies a function element-wise", "Filters DataFrame", "Aggregates data"], "Applies a function element-wise"),
    19: ("How to merge DataFrames with an indicator?", ["pd.merge(df1, df2, how='outer', indicator=True)", "df.merge(df2, indicator=True)", "pd.join(df1, df2, indicator=True)"], "pd.merge(df1, df2, how='outer', indicator=True)"),
    20: ("How to convert wide format to long format?", ["pd.melt()", "df.long()", "df.to_long()"], "pd.melt()"),
    21: ("What is df.pivot_table() used for?", ["Aggregation and reshaping", "Filtering", "Sorting"], "Aggregation and reshaping"),
    22: ("How to access the underlying NumPy array from DataFrame?", ["df.values", "df.to_array()", "df.array()"], "df.values"),
    23: ("How to visualize data with Matplotlib using DataFrame?", ["df.plot()", "plt.plot(df)", "df.matplotlib()"], "df.plot()"),
    24: ("How to deal with time zones in pandas?", ["df.tz_localize()", "pd.timezone()", "df.tz_convert()"], "df.tz_localize()"),
    25: ("What does df.nlargest() return?", ["Top n rows by column", "All rows sorted", "Bottom n rows"], "Top n rows by column"),
}
